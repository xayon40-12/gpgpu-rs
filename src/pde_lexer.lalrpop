use std::str::FromStr;
use crate::integrators::pde_ir::ir_helper::*;

grammar(vars: &Vec<PDE>); // (var name, bourndary function name, dim)

match {
    r"cos|sin|tan|acos|asin|atan" => F1,
    r"atan2" => F2,
    
} else { _ }

pub Expr: SPDETokens = {
    <l:Expr> "+" <r:Factor> => l + r,
    <l:Expr> "-" <r:Factor> => l - r,
    Factor,
};

Factor: SPDETokens = {
    <l:Factor> "*" <r:Pow> => l * r,
    <l:Factor> "/" <r:Pow> => l / r,
    Pow,
};

Pow: SPDETokens = {
    <l:Func> r"\^|\*\*" <r:Pow> => l ^ r,
    Func,
};

Func: SPDETokens = {
    <name:F1> <x:Term> => func(name, vec![x]),
    <name:F2> <x:Term> <y:Term> => func(name, vec![x,y]),
    Term,
};

Term: SPDETokens = {
    Num,
    Symb,
    "(" <Expr> ")",
};

Symb: SPDETokens = {
    r"[a-zA-Z]\w*" => vars.iter().fold(symb(<>),
        |acc,PDE{var_name: v, boundary: b, dim: d}| if <> == v { Indexable::new_scalar(*d,&v,&b) } else { acc }),
};

Num: SPDETokens = {
    r"[0-9]+" => f64::from_str(<>).unwrap().into(),
    r"[0-9]+\.[0-9]+" => f64::from_str(<>).unwrap().into(),
};
